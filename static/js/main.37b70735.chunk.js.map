{"version":3,"sources":["objects/TripType.ts","objects/ClassType.ts","objects/SearchRequest.ts","components/FlightPanel.tsx","components/ResultTable.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["TripType","ClassType","SearchRequest","limit","tripType","RoundTrip","classType","Economy","passengers","source","radius","target","departure","return","stops","FlightPanel","props","flight","route","map","index","Container","key","Row","className","moment","format","diff","arrival","Col","sm","title","displayName","name","alt","airline","src","ResultTable","trips","trip","outwardFlight","duration","returnFlight","price","href","link","rel","Button","variant","apiUrl","tripTypes","t","push","classTypes","c","App","state","request","searching","allowNew","isLoading","multiple","options","departureFlexible","departureFocused","departureSpanFocused","returnFlexible","returnFocused","returnSpanFocused","attr","value","temp","this","setState","axios","post","then","result","data","catch","error","console","get","date","Date","Navbar","Brand","width","height","Form","DropdownButton","id","onSelect","eventKey","changeRequest","Dropdown","Item","indexOf","getPassengerTitle","Control","type","min","defaultValue","onChange","event","getStopTitle","max","step","Group","as","controlId","labelKey","airport","placeholder","minLength","onSearch","query","getAirports","airports","renderMenu","menuProps","option","position","lg","InputGroup","Append","Text","ToggleButtonGroup","ToggleButton","startDate","dateToMoment","from","startDateId","endDate","to","endDateId","onDatesChange","focusedInput","onFocusChange","focused","displayFormat","noBorder","onDateChange","returnTime","onClick","performSearch","ProgressBar","animated","now","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37b70735.chunk.js","sourcesContent":["export enum TripType {\n  RoundTrip = \"Round trip\",\n  OneWay = \"One-way\"\n}\n","export enum ClassType {\n  Economy = \"Economy\",\n  PremiumEconomy = \"Premium Economy\",\n  Business = \"Business\",\n  FirstClass = \"First class\"\n}\n","import { TripType } from \"./TripType\";\nimport { ClassType } from \"./ClassType\";\nimport { Airport } from \"./Airport\";\nimport { Timespan } from \"./Timespan\";\n\nexport class SearchRequest {\n  public limit?: number = 10;\n\n  public tripType?: TripType = TripType.RoundTrip;\n  public classType?: ClassType = ClassType.Economy;\n  public passengers?: number = 1;\n\n  public source?: Airport;\n  public radius?: number;\n  public target?: Airport;\n\n  public departure?: Timespan;\n  public return?: Timespan;\n\n  public stops?: number;\n}\n","import * as React from \"react\";\nimport moment from \"moment\";\nimport { Route } from \"../objects/Route\";\nimport { Flight } from \"../objects/Flight\";\nimport {\n  IoMdCalendar as Calendar,\n  IoIosAirplane as Airplane\n} from \"react-icons/io\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nexport function FlightPanel(props: any) {\n  if (props.flight) {\n    const flight: Flight = props.flight;\n    return (\n      <div>\n        {flight.route\n          ? flight.route.map((route: Route, index: number) => {\n              return (\n                <Container key={index}>\n                  <Row className=\"mb-1\">\n                    <div>\n                      <big>\n                        <Calendar />{\" \"}\n                      </big>\n                      {route.departure\n                        ? moment(route.departure).format(\"ddd D MMM\")\n                        : \"\"}\n                      {moment(route.departure).diff(route.arrival, \"days\") !== 0\n                        ? ` - ${moment(route.arrival).format(\"ddd D MMM\")}`\n                        : \"\"}\n                    </div>\n                  </Row>\n                  <Row className=\"mb-3\">\n                    <Col sm={1}>\n                      <Airplane />\n                    </Col>\n                    <Col className=\"border rounded\">\n                      <div className=\"p-2\">\n                        <div>\n                          <strong\n                            title={moment(route.departure).format(\"ddd D MMM\")}\n                          >\n                            {route.departure\n                              ? moment(route.departure).format(\"HH:mm\")\n                              : \"\"}\n                          </strong>{\" \"}\n                          {route.source?.displayName} {route.source?.name}\n                        </div>\n                        <div>\n                          <strong\n                            title={moment(route.arrival).format(\"ddd D MMM\")}\n                          >\n                            {route.arrival\n                              ? moment(route.arrival).format(\"HH:mm\")\n                              : \"\"}\n                          </strong>{\" \"}\n                          {route.target?.displayName} {route.target?.name}\n                        </div>\n                      </div>\n                    </Col>\n                    <Col sm={3}>\n                      <img\n                        alt={`Airline ${route.airline}`}\n                        src={`https://images.kiwi.com/airlines/64/${route.airline}.png`}\n                      />\n                    </Col>\n                  </Row>\n                </Container>\n              );\n            })\n          : \"\"}\n      </div>\n    );\n  }\n  return <div></div>;\n}\n","import * as React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport { Trip } from \"../objects/Trip\";\nimport { FlightPanel } from \"./FlightPanel\";\n\nexport function ResultTable(props: any) {\n  if (props.trips) {\n    return (\n      <div>\n        {props.trips.map((trip: Trip, index: number) => {\n          return (\n            <Container className=\"mb-3 border-bottom\" key={index}>\n              <Row>\n                <Col>\n                  <div className=\"mb-2\">\n                    <b>DEPARTURE</b> Duration: {trip.outwardFlight?.duration}\n                  </div>\n                  <FlightPanel flight={trip.outwardFlight} />\n                </Col>\n                {trip.returnFlight ? (\n                  <Col>\n                    <div className=\"mb-2\">\n                      <b>RETURN</b> Duration: {trip.returnFlight.duration}\n                    </div>\n                    <FlightPanel flight={trip.returnFlight} />\n                  </Col>\n                ) : (\n                  \"\"\n                )}\n                <Col sm={1}>\n                  <Row>\n                    <h2>{trip.price} €</h2>\n                  </Row>\n                  <Row className=\"mt-3\">\n                    <a\n                      href={trip.link}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      <Button variant=\"success\">Book</Button>\n                    </a>\n                  </Row>\n                </Col>\n              </Row>\n            </Container>\n          );\n        })}\n      </div>\n    );\n  }\n  return <div></div>;\n}\n","import * as React from \"react\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport \"react-dates/initialize\";\nimport \"./App.css\";\nimport {\n  Navbar,\n  Row,\n  Form,\n  Col,\n  Button,\n  DropdownButton,\n  Dropdown,\n  InputGroup,\n  ProgressBar,\n  ToggleButton,\n  ToggleButtonGroup\n} from \"react-bootstrap\";\nimport { SearchRequest } from \"./objects/SearchRequest\";\nimport { TripType } from \"./objects/TripType\";\nimport { ClassType } from \"./objects/ClassType\";\nimport { Trip } from \"./objects/Trip\";\nimport { Airport } from \"./objects/Airport\";\nimport { Timespan } from \"./objects/Timespan\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { ResultTable } from \"./components/ResultTable\";\nimport { AsyncTypeahead, Menu, MenuItem } from \"react-bootstrap-typeahead\";\nimport { DateRangePicker, SingleDatePicker } from \"react-dates\";\nimport {\n  FaCalendar as Calendar,\n  FaCalendarWeek as CalendarSpan\n} from \"react-icons/fa\";\n\nconst apiUrl: string = \"http://localhost:8080/featherkraken/rest\";\n\nexport interface AppState {\n  request: SearchRequest;\n  searching: boolean;\n  trips?: Trip[];\n  allowNew: boolean;\n  isLoading: boolean;\n  multiple: boolean;\n  options: Airport[];\n  departureFlexible: boolean;\n  departureFocused: boolean | null;\n  departureSpanFocused: \"startDate\" | \"endDate\" | null;\n  returnFlexible: boolean;\n  returnFocused: boolean | null;\n  returnSpanFocused: \"startDate\" | \"endDate\" | null;\n}\n\nlet tripTypes: string[] = [];\nfor (var t in TripType) {\n  tripTypes.push(TripType[t]);\n}\nlet classTypes: string[] = [];\nfor (var c in ClassType) {\n  classTypes.push(ClassType[c]);\n}\n\nexport class App extends React.Component<{}, AppState> {\n  state: Readonly<AppState> = {\n    request: new SearchRequest(),\n    searching: false,\n    allowNew: false,\n    isLoading: false,\n    multiple: false,\n    options: [],\n    departureFlexible: false,\n    departureFocused: false,\n    departureSpanFocused: null,\n    returnFlexible: false,\n    returnFocused: false,\n    returnSpanFocused: null\n  };\n\n  changeRequest(attr: string, value: any) {\n    let temp: SearchRequest = this.state.request;\n    temp[attr] = value;\n    this.setState({ request: temp });\n  }\n\n  performSearch() {\n    this.setState({ searching: true });\n    axios\n      .post(`${apiUrl}/flights`, this.state.request)\n      .then(result => {\n        this.setState({ trips: result.data });\n        this.setState({ searching: false });\n      })\n      .catch(error => {\n        console.error(error);\n        this.setState({ searching: false });\n      });\n  }\n\n  getAirports(value: string) {\n    axios\n      .get(`${apiUrl}/airports?query=${value}`)\n      .then(result => {\n        this.setState({ options: result.data });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  getPassengerTitle(): string {\n    if (!this.state.request.passengers) {\n      return \"Passengers\";\n    }\n    const passengers: number = +this.state.request.passengers;\n    return `${passengers} Passenger${passengers === 1 ? \"\" : \"s\"}`;\n  }\n\n  getStopTitle(): string {\n    if (!this.state.request.stops) {\n      return \"Filter stops\";\n    }\n    const stops: number = +this.state.request.stops;\n    if (stops === 0) {\n      return \"Non-stop\";\n    }\n    if (stops === 1) {\n      return \"1 Stop\";\n    }\n    return `${stops} Stops`;\n  }\n\n  dateToMoment(date: string | undefined): moment.Moment {\n    return date ? moment(date, \"DD.MM.YYYY\") : moment(new Date());\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar className=\"shadow\">\n          <Navbar.Brand href=\"#home\">\n            <Row>\n              <img\n                alt=\"Featherkraken\"\n                src=\"./logo512.png\"\n                width=\"50\"\n                height=\"50\"\n                className=\"d-inline-block align-top ml-3 mr-3\"\n              />\n              <h2>Featherkraken</h2>\n            </Row>\n          </Navbar.Brand>\n        </Navbar>\n        <Form className=\"m-5\">\n          <Row className=\"ml-3\">\n            <DropdownButton\n              variant=\"outline\"\n              id=\"tripType\"\n              title={this.state.request.tripType}\n              className=\"mr-1\"\n              onSelect={(eventKey: any) => {\n                this.changeRequest(\"tripType\", eventKey);\n              }}\n            >\n              {tripTypes.map(name => {\n                return (\n                  <Dropdown.Item key={tripTypes.indexOf(name)} eventKey={name}>\n                    {name}\n                  </Dropdown.Item>\n                );\n              })}\n            </DropdownButton>\n            <DropdownButton\n              variant=\"outline\"\n              id=\"passengers\"\n              title={this.getPassengerTitle()}\n              className=\"mr-1\"\n            >\n              <Form.Control\n                type=\"number\"\n                min=\"1\"\n                defaultValue=\"1\"\n                onChange={(event: any) => {\n                  this.changeRequest(\"passengers\", event.target.value);\n                }}\n              />\n            </DropdownButton>\n            <DropdownButton\n              variant=\"outline\"\n              id=\"classType\"\n              title={this.state.request.classType}\n              onSelect={(eventKey: any) => {\n                this.changeRequest(\"classType\", eventKey);\n              }}\n            >\n              {classTypes.map(name => {\n                return (\n                  <Dropdown.Item key={classTypes.indexOf(name)} eventKey={name}>\n                    {name}\n                  </Dropdown.Item>\n                );\n              })}\n            </DropdownButton>\n            <DropdownButton\n              variant=\"outline\"\n              id=\"stops\"\n              title={this.getStopTitle()}\n              className=\"mr-1\"\n            >\n              <Form.Control\n                type=\"number\"\n                min=\"0\"\n                defaultValue=\"0\"\n                onChange={(event: any) => {\n                  this.changeRequest(\"stops\", event.target.value);\n                }}\n              />\n            </DropdownButton>\n            <DropdownButton\n              variant=\"outline\"\n              id=\"stops\"\n              title={`${this.state.request.limit} Results`}\n              className=\"mr-1\"\n            >\n              <Form.Control\n                type=\"number\"\n                min=\"0\"\n                max=\"1000\"\n                step={25}\n                defaultValue={this.state.request.limit}\n                onChange={(event: any) => {\n                  this.changeRequest(\"limit\", event.target.value);\n                }}\n              />\n            </DropdownButton>\n          </Row>\n          <Row className=\"mt-3 ml-3 mr-3\">\n            <Form.Group as={Col} controlId=\"source\" className=\"mr-3\">\n              <AsyncTypeahead\n                {...this.state}\n                id=\"source\"\n                labelKey={(airport: Airport) =>\n                  `${airport.displayName} ${airport.name}`\n                }\n                placeholder=\"Source\"\n                minLength={2}\n                onSearch={(query: string) => this.getAirports(query)}\n                onChange={(airports: Airport[]) => {\n                  this.changeRequest(\"source\", airports[0]);\n                }}\n                renderMenu={(airports, menuProps) => (\n                  <Menu {...menuProps}>\n                    {airports.map((airport, index) => (\n                      <MenuItem option={airport} position={index} key={index}>\n                        {airport.displayName} {airport.name}\n                      </MenuItem>\n                    ))}\n                  </Menu>\n                )}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"distance\" className=\"mr-3\" lg=\"1\">\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  min=\"0\"\n                  defaultValue={this.state.request.radius}\n                  onChange={(event: any) => {\n                    this.changeRequest(\"radius\", event.target.value);\n                  }}\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text id=\"km-addon\">km</InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"target\" className=\"mr-3\">\n              <AsyncTypeahead\n                {...this.state}\n                id=\"target\"\n                labelKey={(airport: Airport) =>\n                  `${airport.displayName} ${airport.name}`\n                }\n                placeholder=\"Target location\"\n                minLength={2}\n                onSearch={(query: string) => this.getAirports(query)}\n                onChange={(airports: Airport[]) => {\n                  this.changeRequest(\"target\", airports[0]);\n                }}\n                renderMenu={(airports, menuProps) => (\n                  <Menu {...menuProps}>\n                    {airports.map((airport, index) => (\n                      <MenuItem option={airport} position={index} key={index}>\n                        {airport.displayName} {airport.name}\n                      </MenuItem>\n                    ))}\n                  </Menu>\n                )}\n              />\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              controlId=\"departure\"\n              className=\"mr-3 border rounded\"\n              lg=\"2\"\n            >\n              <ToggleButtonGroup\n                type=\"checkbox\"\n                onChange={(event: any) => {\n                  this.setState({\n                    departureFlexible: event.indexOf(\"departureFlexible\") > -1\n                  });\n                }}\n              >\n                <ToggleButton\n                  variant=\"light\"\n                  type=\"checkbox\"\n                  value=\"departureFlexible\"\n                >\n                  {this.state.departureFlexible ? (\n                    <Calendar title=\"Exact date\" />\n                  ) : (\n                    <CalendarSpan title=\"Flexible date\" />\n                  )}\n                </ToggleButton>\n              </ToggleButtonGroup>\n              {this.state.departureFlexible ? (\n                <DateRangePicker\n                  startDate={this.dateToMoment(\n                    this.state.request?.departure?.from\n                  )}\n                  startDateId=\"departureFrom\"\n                  endDate={this.dateToMoment(this.state.request?.departure?.to)}\n                  endDateId=\"departureTo\"\n                  onDatesChange={({ startDate, endDate }) => {\n                    const departure: Timespan = {\n                      from: startDate?.format(\"DD.MM.YYYY\"),\n                      to: endDate?.format(\"DD.MM.YYYY\")\n                    };\n                    this.changeRequest(\"departure\", departure);\n                  }}\n                  focusedInput={this.state.departureSpanFocused}\n                  onFocusChange={focused =>\n                    this.setState({ departureSpanFocused: focused })\n                  }\n                  displayFormat=\"DD.MM.YYYY\"\n                  noBorder={true}\n                ></DateRangePicker>\n              ) : (\n                <SingleDatePicker\n                  id=\"departure\"\n                  date={this.dateToMoment(this.state.request?.departure?.from)}\n                  focused={this.state.departureFocused}\n                  onFocusChange={focused =>\n                    this.setState({ departureFocused: focused.focused })\n                  }\n                  onDateChange={date => {\n                    const departure: Timespan = {\n                      from: date?.format(\"DD.MM.YYYY\")\n                    };\n                    this.changeRequest(\"departure\", departure);\n                  }}\n                  displayFormat=\"DD.MM.YYYY\"\n                  noBorder={true}\n                ></SingleDatePicker>\n              )}\n            </Form.Group>\n            {this.state.request.tripType === TripType.RoundTrip ? (\n              <Form.Group\n                as={Col}\n                controlId=\"return\"\n                lg=\"2\"\n                className=\"mr-3 border rounded\"\n              >\n                <ToggleButtonGroup\n                  type=\"checkbox\"\n                  onChange={(event: any) => {\n                    this.setState({\n                      returnFlexible: event.indexOf(\"returnFlexible\") > -1\n                    });\n                  }}\n                >\n                  <ToggleButton\n                    variant=\"light\"\n                    type=\"checkbox\"\n                    value=\"returnFlexible\"\n                  >\n                    {this.state.returnFlexible ? (\n                      <Calendar title=\"Exact date\" />\n                    ) : (\n                      <CalendarSpan title=\"Flexible date\" />\n                    )}\n                  </ToggleButton>\n                </ToggleButtonGroup>\n                {this.state.returnFlexible ? (\n                  <DateRangePicker\n                    startDate={this.dateToMoment(\n                      this.state.request?.return?.from\n                    )}\n                    startDateId=\"returnFrom\"\n                    endDate={this.dateToMoment(this.state.request?.return?.to)}\n                    endDateId=\"returnTo\"\n                    onDatesChange={({ startDate, endDate }) => {\n                      const returnTime: Timespan = {\n                        from: startDate?.format(\"DD.MM.YYYY\"),\n                        to: endDate?.format(\"DD.MM.YYYY\")\n                      };\n                      this.changeRequest(\"return\", returnTime);\n                    }}\n                    focusedInput={this.state.returnSpanFocused}\n                    onFocusChange={focused =>\n                      this.setState({ returnSpanFocused: focused })\n                    }\n                    displayFormat=\"DD.MM.YYYY\"\n                    noBorder={true}\n                  ></DateRangePicker>\n                ) : (\n                  <SingleDatePicker\n                    id=\"return\"\n                    date={this.dateToMoment(this.state.request?.return?.from)}\n                    focused={this.state.returnFocused}\n                    onFocusChange={focused =>\n                      this.setState({ returnFocused: focused.focused })\n                    }\n                    onDateChange={date => {\n                      const returnTime: Timespan = {\n                        from: date?.format(\"DD.MM.YYYY\")\n                      };\n                      this.changeRequest(\"return\", returnTime);\n                    }}\n                    displayFormat=\"DD.MM.YYYY\"\n                    noBorder={true}\n                  ></SingleDatePicker>\n                )}\n              </Form.Group>\n            ) : (\n              \"\"\n            )}\n          </Row>\n          <Row className=\"justify-content-md-center mt-3\">\n            <Button variant=\"primary\" onClick={() => this.performSearch()}>\n              Search\n            </Button>\n          </Row>\n          {this.state.searching ? (\n            <ProgressBar className=\"m-3\" animated now={100} />\n          ) : (\n            \"\"\n          )}\n        </Form>\n        <ResultTable trips={this.state.trips} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}